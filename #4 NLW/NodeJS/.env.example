# Host e porta da Aplicação
HOST_APP="http://localhost"
PORT_APP=

##############################################################
#              Configurações da base de dados.
##############################################################
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
##############################################################
#         PostgresSQL, MySQL, MSSQL, Oracle, SQLite
# Para usar, basta copiar e colar criando um arquivo .env,
# depois, rode o comando docker-compose up -d postgres para
# inicializar o banco de dados.
###############################################################

# O tipo de banco de dados utilizado
DB_TYPE=

# O nome do database que será criado
# Colocar o .sqlite se for utilizar o SQLite.
# Exemplo: nlw4.sqlite
DB_DATABASE=

# Nome do banco de dados para os testes.
# Exemplo: nlw4.test.sqlite
DB_DATABASE_TEST=

# Local das entidades.
DB_ENTITIES="./src/models/*.ts"

# Local das migrations.
DB_MIGRATIONDIR="./src/database/migrations"

# Qual é a extenção das migrations;
DB_MIGRATIONS="./src/database/migrations/*.ts"

# Tome cuidado ao habilitar, isso fará com que o Typeorm
# destrua e construa as tabelas de acordo com as mudanças
# que você fizer nas entidades, veja a opção "synchronize" em:
# https://github.com/typeorm/typeorm/blob/master/docs/connection-options.md#common-connection-options
DB_SYNCHRONIZE=true

# Isso diz para o Typeorm se ele deve rodar as migrations ao iniciar a API,
# marque `false` caso não queira que rode
DB_MIGRATIONS_RUN=false

# O timeout que desiste de se conectar com o banco de dados
DB_TIMEOUT=60000

# Diz se deve realizar o logging das operações do banco de dados
DB_LOGGING=false
